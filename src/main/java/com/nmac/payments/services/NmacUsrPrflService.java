/*
 * Created on 5 Sep 2017 ( Time 14:30:03 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */

package com.nmac.payments.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.nmac.payments.entities.NmacUsrPrfl;
import com.nmac.payments.exceptions.NmacUsrPrflNotFoundException;
import com.nmac.payments.repository.NmacUsrPrflRepository;

@Service
@Transactional(rollbackFor=NmacUsrPrflNotFoundException.class)
public class NmacUsrPrflService 
{
	private static Logger logger = LoggerFactory.getLogger(NmacUsrPrflService.class);
	
	@Autowired
	private NmacUsrPrflRepository nmacusrprflRepository;
		
	/*
	 * READ methods
	 */
	public Page<NmacUsrPrfl> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("NmacUsrPrflService -> findAll NmacUsrPrfls");
		
		return nmacusrprflRepository.findAll(new PageRequest(page, count));
	}

	public Iterable<NmacUsrPrfl> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("NmacUsrPrflService -> findAll NmacUsrPrfls");
		
		return nmacusrprflRepository.findAll();
	}
/*
	public NmacUsrPrfl findBySfid(String nmacusrprfl){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving NmacUsrPrfl with sfid:" + nmacusrprfl);
		
		return nmacusrprflRepository.findBySfid(nmacusrprfl);
		
	}
*/
	public NmacUsrPrfl get(int id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving NmacUsrPrfl with id:" + id);
		
		NmacUsrPrfl elementToGet = nmacusrprflRepository.findOne(id);
		
		if (elementToGet == null)
			throw new NmacUsrPrflNotFoundException(id);
		
		return elementToGet;
	}

	public NmacUsrPrfl create(NmacUsrPrfl nmacusrprfl) {

		if (logger.isDebugEnabled())
			logger.debug("NmacUsrPrflService -> create:" + nmacusrprfl);
			
		return nmacusrprflRepository.save(nmacusrprfl);
	}

	public NmacUsrPrfl update(NmacUsrPrfl nmacusrprfl) {
		
		if (logger.isDebugEnabled())
			logger.debug("NmacUsrPrflService -> create:" + nmacusrprfl);

		NmacUsrPrfl elementToUpdate = nmacusrprflRepository.findOne(nmacusrprfl.getId());
		
		if (elementToUpdate == null)
			throw new NmacUsrPrflNotFoundException(nmacusrprfl.getCrteUsrId());
		
		elementToUpdate.update(nmacusrprfl);
		nmacusrprflRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public NmacUsrPrfl delete(int id) {
		if (logger.isDebugEnabled())
			logger.debug("NmacUsrPrflService -> delete:" + id);

		NmacUsrPrfl elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new NmacUsrPrflNotFoundException(id);
		
		nmacusrprflRepository.delete(elementToDelete);

		return elementToDelete;
	}

}

